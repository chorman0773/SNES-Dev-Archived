/*
 * random
 *
 *  Created on: Jan 3, 2019
 *      Author: chorm
 */

#ifndef INCLUDE_STDCXX_RANDOM_2019_01_03_19_07
#define INCLUDE_STDCXX_RANDOM_2019_01_03_19_07

#include <cstdint>
#include <string>
#include <limits>


namespace std{
	struct random_device{
	private:
		unsigned int _M_khash;
		random_device(const random_device&)=delete;
		random_device& operator=(const random_device&)=delete;
	public:
		using result_type = unsigned int;
		random_device();
		explicit random_device(const std::string&);
		result_type operator()();
		double enthropy()const noexcept;
		static constexpr result_type min(){
			return 0;
		}
		static constexpr result_type max(){
			return std::numeric_limits<result_type>::max();
		}
	};
	template<typename _UIntType,_UIntType _A,_UIntType _B,_UIntType _M> struct linear_congruential_engine{
	private:
		_UIntType _M_state=1;
	public:
		constexpr static _UIntType multipler{_A};
		constexpr static _UIntType increment{_B};
		constexpr static _UIntType modulus{_M};
		constexpr static _UIntType default_seed{1};

		using result_type = _UIntType;

		linear_congruential_engine()=default;
		explicit linear_congruential_engine(_UIntType __seed):_M_state{(__seed^_A)%_M}{}
		constexpr static _UIntType max(){
			return _M;
		}
		constexpr static _UIntType min(){
			return _B?1:0;
		}
		void seed(_UIntType __seed = default_seed){
			_M_state = (__seed^_A)%_M;
		}
		_UIntType operator()(){
			return (_M_state = (_M_state*_A + _B)%_M);
		}
		void discard(unsigned long long z){
			while(z--)static_cast<void>((*this)());
		}
	};

	template<unsigned long long _A,unsigned long long _B,unsigned long long _M> struct __default_random_engine:private linear_congruential_engine<unsigned long long,_A,_B,_M>{
	private:
		using _Base = linear_congruential_engine<unsigned long long,_A,_B,_M>;
		static unsigned long long _GenUniqueSeed(){
			static unsigned long long num{6126181121863};
			const static unsigned long long cprime{137079025104583};
			unsigned long long val{};
			{
				__builtin_atomic_begin();
				val = num;
				num = cprime*num+1;
				__builtin_atomic_end();
			}
			return val*__builtin_rtc_seconds()+__builtin_rtc_nanos();
		}
	public:
		__default_random_engine():_Base(_GenUniqueSeed()){}
		__default_random_engine(unsigned long long __seed):_Base(seed){}
		unsigned operator()(){
			return (this->_Base::operator()())>>16uLL;
		}
		void seed(unsigned long long __seed=_GenUniqueSeed()){
			(this->_Base::seed(__seed));
		}
		using _Base::discard;
		using _Base::increment;
		using _Base::modulus;
		using _Base::multipler;
		using _Base::max;
		using _Base::min;
	};
	using default_random_engine = __default_random_engine<0x5DEECE66DuLL,0xBuLL,0xFFFFFFFFFFFFuLL>;
	using minstd_rand0 = std::linear_congruential_engine<std::uint_fast32_t, 16807, 0, 2147483647>;
	using minstd_rand = std::linear_congruential_engine<std::uint_fast32_t, 48271, 0, 2147483647>;
}


#endif /* INCLUDE_STDC___RANDOM_2019_01_03_19_07 */
